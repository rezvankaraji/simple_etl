import psycopg2 as pg
from psycopg2 import sql
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT


try:
    conn = pg.connect(
        "host=127.0.0.1 dbname=warehouse user=postgres password=postgres")
    cur = conn.cursor()
except:
	conn = pg.connect("host=127.0.0.1 user=postgres password=postgres")
	conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
	cur = conn.cursor()
	cur.execute(sql.SQL("CREATE DATABASE WAREHOUSE"))
	conn.commit()
	conn.close()
	conn = pg.connect(
        "host=127.0.0.1 dbname=warehouse user=postgres password=postgres")
	cur = conn.cursor()

cur.execute("""
-- TABLES
CREATE TABLE IF NOT EXISTS BOOK (
    ISBN INT NOT NULL,
    Title VARCHAR(25) NOT NULL,
	Description VARCHAR(256) NOT NULL,
	Original_language VARCHAR(25) NOT NULL,
	Version_number INT NOT NULL,
	Release_date date NOT NULL,
	Publisher VARCHAR(25) NOT NULL,
	Amount INT NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS WRITER (
	Writer_id INT NOT NULL,
	First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Writer_id)
);

CREATE TABLE IF NOT EXISTS BOOK_WRITER (
	_id INT NOT NULL,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Writer_id INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS BOOK_GENRE (
	_id INT NOT NULL,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Genre VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS TRANSLATOR (
	Translator_id INT NOT NULL,
	First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Translator_id)
);

CREATE TABLE IF NOT EXISTS BOOK_translator (
	_id INT NOT NULL,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Translator_id INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS MEMBERS (
    Member_id INT NOT NULL,
    First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	Birth_date date NOT NULL,
	Registration_date date NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Member_id)
);

CREATE TABLE IF NOT EXISTS ADDRESS (
	Zip_code INT NOT NULL,
	Country VARCHAR(25) NOT NULL,
	City VARCHAR(25) NOT NULL,
	Street VARCHAR(25) NOT NULL,
	House_number INT NOT NULL,
	Apt_number INT NOT NULL,
	Area_code INT NOT NULL,
	Phone_number INT NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Zip_code)
);

CREATE TABLE IF NOT EXISTS MEMBERS_ADDRESS (
	_id INT NOT NULL,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Zip_code INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS MEMBERS_PHONE (
	_id INT NOT NULL,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Mobile_code INT NOT NULL,
	Mobile_number INT NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS MEMBERS_BORROW (
	Borrow_id INT NOT NULL,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Expiration_date date NOT NULL,
	created_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Borrow_id)
);

-- DELETE TABLES
CREATE TABLE IF NOT EXISTS DELETED_BOOK (
    ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
    Title VARCHAR(25) NOT NULL,
	Description VARCHAR(256) NOT NULL,
	Original_language VARCHAR(25) NOT NULL,
	Version_number INT NOT NULL,
	Release_date date NOT NULL,
	Publisher VARCHAR(25) NOT NULL,
	Amount INT NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN)
);

CREATE TABLE IF NOT EXISTS DELETED_WRITER (
	Writer_id INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Writer_id)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_WRITER (
	_id INT REFERENCES BOOK_WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Writer_id INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_GENRE (
	_id INT REFERENCES BOOK_GENRE ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Genre VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS DELETED_TRANSLATOR (
	Translator_id INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Translator_id)
);

CREATE TABLE IF NOT EXISTS DELETED_BOOK_translator (
	_id INT REFERENCES BOOK_translator ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Translator_id INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS (
    Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
    First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	Birth_date date NOT NULL,
	Registration_date date NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Member_id)
);

CREATE TABLE IF NOT EXISTS DELETED_ADDRESS (
	Zip_code INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Country VARCHAR(25) NOT NULL,
	City VARCHAR(25) NOT NULL,
	Street VARCHAR(25) NOT NULL,
	House_number INT NOT NULL,
	Apt_number INT NOT NULL,
	Area_code INT NOT NULL,
	Phone_number INT NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Zip_code)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS_ADDRESS (
	_id INT REFERENCES MEMBERS_ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Zip_code INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS_PHONE (
	_id INT REFERENCES MEMBERS_PHONE ON UPDATE NO ACTION ON DELETE NO ACTION,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Mobile_code INT NOT NULL,
	Mobile_number INT NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id)
);

CREATE TABLE IF NOT EXISTS DELETED_MEMBERS_BORROW (
	Borrow_id INT REFERENCES MEMBERS_BORROW ON UPDATE NO ACTION ON DELETE NO ACTION,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Expiration_date date NOT NULL,
	created_at DATE NOT NULL,
	deleted_at DATE NOT NULL,
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Borrow_id)
);

-- UPDATE TABLES
CREATE TABLE IF NOT EXISTS UPDATED_BOOK (
    ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
    Title VARCHAR(25) NOT NULL,
	Description VARCHAR(256) NOT NULL,
	Original_language VARCHAR(25) NOT NULL,
	Version_number INT NOT NULL,
	Release_date date NOT NULL,
	Publisher VARCHAR(25) NOT NULL,
	Amount INT NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (ISBN, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_WRITER (
	Writer_id INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Writer_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_WRITER (
	_id INT REFERENCES BOOK_WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Writer_id INT REFERENCES WRITER ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_GENRE (
	_id INT REFERENCES BOOK_GENRE ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Genre VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_TRANSLATOR (
	Translator_id INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Translator_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_BOOK_translator (
	_id INT REFERENCES BOOK_translator ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Translator_id INT REFERENCES TRANSLATOR ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS (
    Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
    First_name VARCHAR(25) NOT NULL,
	Mid_name VARCHAR(25),
	Last_name VARCHAR(25) NOT NULL,
	Birth_date date NOT NULL,
	Registration_date date NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Member_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_ADDRESS (
	Zip_code INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Country VARCHAR(25) NOT NULL,
	City VARCHAR(25) NOT NULL,
	Street VARCHAR(25) NOT NULL,
	House_number INT NOT NULL,
	Apt_number INT NOT NULL,
	Area_code INT NOT NULL,
	Phone_number INT NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Zip_code, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS_ADDRESS (
	_id INT REFERENCES MEMBERS_ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Zip_code INT REFERENCES ADDRESS ON UPDATE NO ACTION ON DELETE NO ACTION,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS_PHONE (
	_id INT REFERENCES MEMBERS_PHONE ON UPDATE NO ACTION ON DELETE NO ACTION,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	Mobile_code INT NOT NULL,
	Mobile_number INT NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (_id, updated_at)
);

CREATE TABLE IF NOT EXISTS UPDATED_MEMBERS_BORROW (
	Borrow_id INT REFERENCES MEMBERS_BORROW ON UPDATE NO ACTION ON DELETE NO ACTION,
	Member_id INT REFERENCES MEMBERS ON UPDATE NO ACTION ON DELETE NO ACTION,
	ISBN INT REFERENCES BOOK ON UPDATE NO ACTION ON DELETE NO ACTION,
	Expiration_date date NOT NULL,
	created_at DATE NOT NULL,
	updated_at DATE NOT NULL, 
	transfered_at DATE DEFAULT NOW(),
	PRIMARY KEY (Borrow_id, updated_at)
);
""")
conn.commit()
conn.close()
